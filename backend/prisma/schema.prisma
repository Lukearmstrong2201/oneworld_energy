generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int        @id @default(autoincrement())
  email             String     @unique
  hashedPassword    String
  firstName         String
  lastName          String
  role              Role       @default(USER)
  company           Company?   @relation(fields: [companyId], references: [id])
  companyId         Int?       // Optional FK
  listings          Listing[]  @relation("UserListings")
  transactions      Transaction[] @relation("UserTransactions")
  messagesSent      Message[]  @relation("MessagesSent")
  messagesReceived  Message[]  @relation("MessagesReceived")
  auditLogs         AuditLog[]
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

model Company {
  id         Int       @id @default(autoincrement())
  name       String
  address    String
  users      User[]
  listings   Listing[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Listing {
  id            String        @id @default(uuid())
  title         String
  description   String
  price         Float
  quantity      Int
  status        ListingStatus @default(ACTIVE)
  seller        User          @relation("UserListings", fields: [sellerId], references: [id])
  sellerId      Int
  company       Company       @relation(fields: [companyId], references: [id])
  companyId     Int
  transactions  Transaction[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Transaction {
  id            String      @id @default(uuid())
  listing       Listing     @relation(fields: [listingId], references: [id])
  listingId     String
  buyer         User        @relation("UserTransactions", fields: [buyerId], references: [id])
  buyerId       Int
  amount        Float
  payment       Payment?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Payment {
  id            String      @id @default(uuid())
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  transactionId String      @unique
  provider      String
  status        PaymentStatus
  amount        Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Message {
  id         String   @id @default(uuid())
  sender     User     @relation("MessagesSent", fields: [senderId], references: [id])
  senderId   Int
  receiver   User     @relation("MessagesReceived", fields: [receiverId], references: [id])
  receiverId Int
  content    String
  sentAt     DateTime @default(now())
  read       Boolean  @default(false)
}

model AuditLog {
  id         String   @id @default(uuid())
  action     String
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  tableName  String
  recordId   String
  timestamp  DateTime @default(now())
}

model SEOContent {
  id         String   @id @default(uuid())
  title      String
  slug       String   @unique
  content    String
  published  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}

enum ListingStatus {
  ACTIVE
  INACTIVE
  SOLD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}